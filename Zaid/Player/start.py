import asyncio
from pyrogram import filters
from pyrogram.types import Message
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram.errors import MessageNotModified
from Zaid.main import Test, bot as Client
from config import START_PIC, UPDATES_CHANNEL, GROUP_SUPPORT


ALIVE_PIC = START_PIC
HOME_TEXT = "üëãüèª **Hi Sir [{}](tg://user?id={})** \n\nü§ñ Im **Zaid Vc Player**. \n**I Can Stream Lives, Radios, Raid, Vc Raid, YouTube Videos & Telegram Video Files On Voice Chat Of Telegram Groups**"
HELP_TEXT = """
üè∑Ô∏è **s·¥á·¥õ·¥ú·¥ò …¢·¥ú…™·¥Ö·¥á** :

\u2022 s·¥õ·¥Ä Ä·¥õ ·¥Ä ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.
\u2022 ·¥Ä·¥Ö·¥Ö  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥ ·¥Ñ ú·¥Ä·¥õ ·¥°…™·¥õ ú ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs.
\u2022 ·¥Ö·¥è…¥·¥á s·¥á·¥õ·¥ú·¥ò ·¥ò Ä·¥è·¥Ñ·¥áss  Ä·¥á·¥Ä·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ô·¥á ü·¥è·¥° üëá.
"""



USER_TEXT = """
üè∑Ô∏è **·¥ús·¥á Äs ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös** :

\u2022 /play <Query> ·¥õ·¥è ·¥ò ü·¥Ä è ·¥Ä s·¥è…¥…¢.
\u2022 /vplay <Query> ·¥õ·¥è ·¥ò ü·¥Ä è ·¥†…™·¥Ö·¥á·¥è.
\u2022 /stream <Live Url> ·¥õ·¥è ·¥ò ü·¥Ä è  ü…™·¥†·¥á s·¥õ Ä·¥á·¥Ä·¥çs üëá\n /song ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä ·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á. \n /video ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥†…™·¥Ö·¥á·¥è “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á\n /lyric ·¥õ·¥è “ì…™…¥·¥Ö  ü è Ä…™·¥Ñs.
"""

SPAM_TEXT = """
üè∑Ô∏è **s·¥ò·¥Ä·¥ç  ú·¥á ü·¥ò @adminsOnly** :

\u2022 /spam <Count> ·¥õ·¥áx·¥õ ·¥õ·¥è s·¥ò·¥Ä·¥ç  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á.
\u2022 /fspam <Count> ·¥õ·¥áx·¥õ “ì·¥è Ä s·¥ò·¥Ä·¥ç·¥ç…™…¥…¢.
\u2022 /delayspam <Count> ·¥õ·¥áx·¥õ “ì·¥è Ä s·¥ò·¥Ä·¥ç·¥ç…™…¥…¢.
"""

RAID_TEXT = """
üè∑Ô∏è ** Ä·¥Ä…™·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös @SudoOnly** :

\u2022 /vcraid <chatid> - …¢…™·¥†·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö ·¥á üs·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á  Ä·¥Ä…™·¥Ö.
\u2022 /vraid <chatid +  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥†…™·¥Ö·¥á·¥è “ì…™ ü·¥á> - ·¥õ·¥è  Ä·¥Ä…™·¥Ö ·¥†…™·¥Ö·¥á·¥è.
\u2022 /raidpause - ·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á  Ä·¥Ä…™·¥Ö.
\u2022 /raidresume ·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á  Ä·¥Ä…™·¥Ö.
\u2022 /raidend <chatid> ·¥õ·¥è ·¥á…¥·¥Ö ·¥Ä·¥ú·¥Ö…™·¥è/·¥†…™·¥Ö·¥á·¥è  Ä·¥Ä…™·¥Ö.
"""

ADMIN = """
üè∑Ô∏è **·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös** :

\u2022 /userbotjoin ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ.
\u2022 /end ·¥õ·¥è ·¥á…¥·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.
\u2022 /pause ·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á s·¥õ Ä·¥á·¥Ä·¥ç.
\u2022 /resume ·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á s·¥õ Ä·¥á·¥Ä·¥ç.
\u2022 /volume ·¥õ·¥è s·¥á·¥õ ·¥†·¥è ü·¥ú·¥ç·¥á.
\u2022 /skip ·¥õ·¥è s·¥ã…™·¥ò ·¥õ Ä·¥Ä·¥Ñ·¥ãs.
"""

@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data=="help":
        buttons = [
            [
                InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥", url="https://telegra.ph/ùóïooo--‚Äå·¥ÄÍú∞·¥ã-·¥èÍú∞Íú∞ ü…™…¥·¥á-05-17-2"),
                InlineKeyboardButton("·¥ús·¥á Äs", callback_data="users"),
            ],
            [
                InlineKeyboardButton(" Ä·¥Ä…™·¥Ö·¥è", callback_data="raid"),
                InlineKeyboardButton("s·¥ò·¥Ä·¥ç üëª", callback_data="spam"),
            ],
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                HELP_TEXT,
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data=="home":
        get_me = await client.get_me()
        USERNAME = get_me.username
        buttons = [
            [
                InlineKeyboardButton("s ú·¥Ä·¥Ö·¥è·¥° ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös &  ú·¥á ü·¥ò", callback_data="help"),
            ],
            [
                InlineKeyboardButton("·¥õ…¢-·¥è“ì“ì…™·¥Ñ·¥Ä ü", url="https://t.me/tgshadow_fighters"),
            ],
            [
                InlineKeyboardButton("‚úö ·¥Ä·¥Ö·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚úö", url='https://t.me/{USERNAME}?startgroup=true'),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                HOME_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data=="users":
        buttons = [
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                USER_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data=="admins":
        buttons = [
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(ADMIN, reply_markup=reply_markup)
        except MessageNotModified:
            pass

    elif query.data=="raid":
        buttons = [
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                RAID_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data=="spam":
        buttons = [
            [
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="help"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                SPAM_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data=="close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass


@Client.on_message(filters.command(["start"]) & filters.private)
async def start(client: Client, message: Message):
    get_me = await client.get_me()
    USERNAME = get_me.username
    buttons = [
            [
                InlineKeyboardButton("s ú·¥Ä·¥Ö·¥è·¥° ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös &  ú·¥á ü·¥ò", callback_data="help"),
            ],
            [
                InlineKeyboardButton("·¥õ…¢-·¥è“ì“ì…™·¥Ñ·¥Ä ü", url="https://t.me/tgshadow_fighters"),
            ],
            [
                InlineKeyboardButton("‚úö ·¥Ä·¥Ö·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚úö", url='https://t.me/{USERNAME}?startgroup=true'),
            ]
            ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_photo(photo=f"{ALIVE_PIC}", caption=HOME_TEXT.format(message.from_user.first_name, message.from_user.id), reply_markup=reply_markup)

@Client.on_message(filters.command(["help"]) & filters.private)
async def help(client: Client, message: Message):
    get_me = await client.get_me()
    self.username = get_me.username
    buttons = [
            [
                InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥", url="https://telegra.ph/ùóïooo--‚Äå·¥ÄÍú∞·¥ã-·¥èÍú∞Íú∞ ü…™…¥·¥á-05-17-2"),
                InlineKeyboardButton("·¥ús·¥á Äs", callback_data="users"),
            ],
            [
                InlineKeyboardButton(" Ä·¥Ä…™·¥Ö·¥è", callback_data="raid"),
                InlineKeyboardButton("s·¥ò·¥Ä·¥ç üëª", callback_data="spam"),
            ],
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
            ]
            ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_photo(photo=f"{ALIVE_PIC}", caption=f"{HELP_TEXT}", reply_markup=reply_markup)
